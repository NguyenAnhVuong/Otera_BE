# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type EventParticipant {
  id: Int!
  eventId: Int!
  userId: Int!
  bookingStatus: EBookingStatus!
  code: String
  rejectReason: String
  isDeleted: Boolean!
  approverId: Int
  checkInAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  event: Event!
  user: User!
  approver: User
}

enum EBookingStatus {
  BOOKING
  REJECTED
  APPROVED
  CANCEL
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type EventParticipantType {
  id: Int!
  eventId: Int!
  role: ERole!
  isDeleted: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  event: Event!
}

enum ERole {
  SYSTEM
  FAMILY_ADMIN
  FAMILY_MEMBER
  TEMPLE_ADMIN
  TEMPLE_MEMBER
  PUBLIC_USER
}

type Image {
  id: Int!
  deceasedId: Int
  templeId: Int
  eventId: Int
  image: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deceased: Deceased!
  temple: Temple!
  event: Event!
}

type Event {
  id: Int!
  templeId: Int
  creatorId: Int!
  name: String!
  avatar: String!
  description: String
  startDateEvent: DateTime!
  endDateEvent: DateTime!
  startDateBooking: DateTime
  endDateBooking: DateTime
  address: String!
  phone: String
  email: String
  priority: EPriority!
  priorityExpired: DateTime
  isDeleted: Boolean!
  maxParticipant: Int
  isFreeOpen: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  eventParticipants: [EventParticipant!]!
  images: [Image!]!
  eventParticipantTypes: [EventParticipantType!]!
  user: User!
  temple: Temple!
}

enum EPriority {
  LOW
  MEDIUM
  HIGH
}

type FamilyTemple {
  id: Int!
  familyId: Int
  templeId: Int
  isDeleted: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  family: Family!
  temple: Temple!
}

type Family {
  id: Int!
  familyCode: String!
  adminId: Int!
  name: String!
  description: String!
  address: String!
  phone: String!
  avatar: String!
  status: EStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  users: [User!]!
  deceaseds: [Deceased!]!
  familyTemples: [FamilyTemple!]!
  deathAnniversaries: [DeathAnniversary!]!
}

enum EStatus {
  REJECTED
  PENDING
  APPROVED
  BLOCKED
}

type Review {
  id: Int!
  userId: Int!
  templeId: Int
  eventId: Int
  content: String!
  rating: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  temple: Temple!
  user: User!
}

type FollowerTemple {
  id: Int!
  templeId: Int!
  userId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  temple: Temple!
}

type UserDetail {
  id: Int!
  avatar: String!
  name: String!
  phone: String
  birthday: String!
  address: String
  gender: EGender!
  citizenNumber: String
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  deceased: Deceased!
}

enum EGender {
  MALE
  FEMALE
  OTHER
}

type User {
  id: Int!
  email: String!
  status: EAccountStatus!
  role: ERole!
  familyId: Int
  templeId: Int
  userDetailId: Int
  passwordChangedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  temple: Temple!
  userDetail: UserDetail!
  family: Family
  reviews: [Review!]!
  deathAnniversaries: [DeathAnniversary!]!
  followerTemples: FollowerTemple!
  events: [Event!]!
  eventParticipants: [EventParticipant!]!
  modifiedDeceaseds: [Deceased!]!
}

enum EAccountStatus {
  INACTIVE
  ACTIVE
}

type Deceased {
  id: Int!
  dateOfDeath: String!
  tombAddress: String!
  description: String
  rejectReason: String
  userDetailId: Int
  templeId: Int!
  familyId: Int
  creatorId: Int!
  modifierId: Int
  isDeleted: Boolean!
  status: EStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  temple: Temple!
  family: Family!
  images: [Image!]!
  userDetail: UserDetail!
  deathAnniversaries: [DeathAnniversary!]!
  modifier: User
}

type Offering {
  id: Int!
  name: String!
  image: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deathAnniversaryOfferings: [DeathAnniversaryOffering!]!
}

type DeathAnniversaryOffering {
  id: Int!
  deathAnniversaryId: Int!
  offeringId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  deathAnniversary: DeathAnniversary!
  offering: Offering!
}

type DeathAnniversary {
  id: Int!
  deceasedId: Int!
  familyId: Int!
  templeId: Int!
  desiredStartTime: DateTime!
  desiredEndTime: DateTime!
  actualStartTime: DateTime
  actualEndTime: DateTime
  status: EDeathAnniversaryStatus!
  enableUpdate: Boolean!
  creatorId: Int!
  note: String
  rejectReason: String
  isDeleted: Boolean!
  isLiveStream: Boolean!
  linkLiveStream: String
  deathAnniversaryType: EDeathAnniversaryType!
  readyImage: String
  finishedImage: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deceased: Deceased!
  temple: Temple!
  user: User!
  family: Family!
  deathAnniversaryOfferings: [DeathAnniversaryOffering!]!
}

enum EDeathAnniversaryStatus {
  REJECTED
  PENDING
  APPROVED
  READY
  CANCEL
  FINISHED
}

enum EDeathAnniversaryType {
  FIRST_ANNIVERSARY
  SECOND_ANNIVERSARY
  REGULAR_ANNIVERSARY
}

type Temple {
  id: Int!
  name: String!
  avatar: String!
  address: String!
  description: String!
  phone: String
  email: String!
  website: String
  priority: EPriority!
  priorityExpired: DateTime
  plan: EPlan!
  planExpired: DateTime
  status: EStatus!
  rejectReason: String
  blockReason: String
  adminId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  users: [User!]!
  deceaseds: [Deceased!]!
  familyTemples: [FamilyTemple!]!
  images: [Image!]!
  reviews: [Review!]!
  deathAnniversaries: [DeathAnniversary!]!
  followerTemples: [FollowerTemple!]!
  events: [Event!]!
}

enum EPlan {
  FREE
  PREMIUM
}

type GQLResponse {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
}

type CreateRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: Boolean!
}

type AffectedResult {
  affected: Int!
}

type UpdateRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: AffectedResult
}

type UserRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: User!
}

type TempleRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: Temple!
}

type TempleWithAdmin {
  id: Int!
  name: String!
  avatar: String!
  address: String!
  description: String!
  phone: String
  email: String!
  website: String
  priority: EPriority!
  priorityExpired: DateTime
  plan: EPlan!
  planExpired: DateTime
  status: EStatus!
  rejectReason: String
  blockReason: String
  adminId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  users: [User!]!
  deceaseds: [Deceased!]!
  familyTemples: [FamilyTemple!]!
  images: [Image!]!
  reviews: [Review!]!
  deathAnniversaries: [DeathAnniversary!]!
  followerTemples: [FollowerTemple!]!
  events: [Event!]!
  admin: User!
}

type TemplesPagingData {
  totalItems: Int!
  page: Int!
  totalPages: Int!
  take: Int!
  data: [TempleWithAdmin!]
}

type TemplesRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: TemplesPagingData!
}

type TempleMembersPagingData {
  totalItems: Int!
  page: Int!
  totalPages: Int!
  take: Int!
  data: [User!]
}

type TempleMembersRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: TempleMembersPagingData!
}

type Notification {
  id: Int!
  userId: Int
  title: String!
  description: String
  type: ENotificationType!
  inviteFamilyId: Int
  redirectTo: String
  isRead: Boolean!
  isDeleted: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum ENotificationType {
  INVITE_FAMILY
  NEW_EVENT
  UPDATE_EVENT
  CANCEL_EVENT
  APPROVE_EVENT_PARTICIPANT
  REJECT_EVENT_PARTICIPANT
  REQUEST_DEATH_ANNIVERSARY
  APPROVE_DEATH_ANNIVERSARY
  REJECT_DEATH_ANNIVERSARY
  READY_DEATH_ANNIVERSARY
  FINISH_DEATH_ANNIVERSARY
  CONTRIBUTE_DECEASED_IMAGE
}

type NotificationsPagingData {
  totalItems: Int!
  page: Int!
  totalPages: Int!
  take: Int!
  data: [Notification!]!
}

type NotificationsRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: NotificationsPagingData!
}

type EventParticipantRes {
  id: Int!
  eventId: Int!
  userId: Int!
  bookingStatus: EBookingStatus!
  code: String
  rejectReason: String
  isDeleted: Boolean!
  approverId: Int
  checkInAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  event: Event!
  user: User!
  approver: User
  isFollowing: Boolean!
  familyName: String
}

type ListEventParticipant {
  totalItems: Int!
  page: Int!
  totalPages: Int!
  take: Int!
  data: [EventParticipantRes!]
}

type EventParticipantsRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: ListEventParticipant
}

type EventDetail {
  id: Int!
  templeId: Int
  creatorId: Int!
  name: String!
  avatar: String!
  description: String
  startDateEvent: DateTime!
  endDateEvent: DateTime!
  startDateBooking: DateTime
  endDateBooking: DateTime
  address: String!
  phone: String
  email: String
  priority: EPriority!
  priorityExpired: DateTime
  isDeleted: Boolean!
  maxParticipant: Int
  isFreeOpen: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  eventParticipants: [EventParticipant!]!
  images: [Image!]!
  eventParticipantTypes: [EventParticipantType!]!
  user: User!
  temple: Temple!
  currentParticipant: Float!
  isBooked: Boolean!
}

type EventRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: EventDetail
}

type EventManagementInfo {
  id: Int!
  templeId: Int
  creatorId: Int!
  name: String!
  avatar: String!
  description: String
  startDateEvent: DateTime!
  endDateEvent: DateTime!
  startDateBooking: DateTime
  endDateBooking: DateTime
  address: String!
  phone: String
  email: String
  priority: EPriority!
  priorityExpired: DateTime
  isDeleted: Boolean!
  maxParticipant: Int
  isFreeOpen: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  eventParticipants: [EventParticipant!]!
  images: [Image!]!
  eventParticipantTypes: [EventParticipantType!]!
  user: User!
  temple: Temple!
  currentParticipant: Float!
  bookingParticipant: Float!
  checkInParticipant: Float!
}

type EventsPagingData {
  totalItems: Int!
  page: Int!
  totalPages: Int!
  take: Int!
  data: [EventManagementInfo!]!
}

type EventsRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: EventsPagingData!
}

type BookingEventsPagingData {
  totalItems: Int!
  page: Int!
  totalPages: Int!
  take: Int!
  data: [Event!]!
}

type BookingEventsRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: BookingEventsPagingData!
}

type ListDeathAnniversary {
  totalItems: Int!
  page: Int!
  totalPages: Int!
  take: Int!
  data: [DeathAnniversary!]!
}

type DeathAnniversariesRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: ListDeathAnniversary!
}

type DeathAnniversaryRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: DeathAnniversary!
}

type DeceasedPaging {
  totalItems: Int!
  page: Int!
  totalPages: Int!
  take: Int!
  data: [Deceased!]!
}

type DeceasedListRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: DeceasedPaging!
}

type DeceasedRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: Deceased!
}

type DeleteRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: Boolean!
}

type FollowerTemplesPagingData {
  totalItems: Int!
  page: Int!
  totalPages: Int!
  take: Int!
  data: [FollowerTemple!]!
}

type FollowerTemplesRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: FollowerTemplesPagingData!
}

type FamilyRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: Family!
}

type FamilyMembers {
  totalItems: Int!
  page: Int!
  totalPages: Int!
  take: Int!
  data: [User!]!
}

type FamilyMembersRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: FamilyMembers!
}

type Test {
  """Example field (placeholder)"""
  exampleField: Int!
}

type Test2 {
  """Example field (placeholder)"""
  statusCode: Int!

  """Example field (placeholder)"""
  errorMessage: String

  """Example field (placeholder)"""
  errorCode: String

  """Example field (placeholder)"""
  timestamp: String!

  """Example field (placeholder)"""
  data: Test!
}

type ListOffering {
  totalItems: Int!
  page: Int!
  totalPages: Int!
  take: Int!
  data: [Offering!]!
}

type OfferingsRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: ListOffering!
}

type IsBookedEvent {
  isBooked: Boolean!
}

type Query {
  getUser: UserRes!
  systemGetTemples(page: Int, take: Int, skip: Int, name: String, email: String, address: String, status: EStatus, orderBy: [OrderBy!]): TemplesRes!
  getTempleDetail(id: Int!): TempleRes!
  getTempleMembers(page: Int, take: Int, skip: Int, name: String, email: String, phone: String, address: String, roles: [ERole!], orderBy: [OrderBy!]): TempleMembersRes!
  getFamily(page: Int, take: Int, skip: Int, id: Int!): FamilyRes!
  getFamilyMembers(page: Int, take: Int, skip: Int, orderBy: [OrderBy!], id: Int!, name: String, address: String, email: String, phone: String, roleFilter: [ERole!]): FamilyMembersRes!
  templeGetDeceasedList(page: Int, take: Int, skip: Int, name: String, address: String, tombAddress: String, status: EStatus, isDeleted: Boolean, familyKeyword: String, orderBy: [OrderBy!]): DeceasedListRes!
  familyGetListDeceased(page: Int, take: Int, skip: Int): DeceasedListRes!
  getDeceased(id: Int!): DeceasedRes!
  familyGetDeathAnniversaries(page: Int, take: Int, skip: Int, name: String, tombAddress: String, requesterName: String, deathAnniversaryTypes: [EDeathAnniversaryType!], status: EDeathAnniversaryStatus, orderBy: [OrderBy!]): DeathAnniversariesRes!
  templeGetDeathAnniversaries(page: Int, take: Int, skip: Int, name: String, familyKeyword: String, tombAddress: String, requesterName: String, deathAnniversaryTypes: [EDeathAnniversaryType!], status: EDeathAnniversaryStatus, orderBy: [OrderBy!]): DeathAnniversariesRes!
  checkIsExistedRequestDeathAnniversary(deceasedId: Int!): CreateRes!
  test123(id: Int!): Test2!
  templeGetEvents(page: Int, take: Int, skip: Int, name: String, upcoming: Boolean, onGoing: Boolean, ended: Boolean, isFreeOpen: Boolean, orderBy: [OrderBy!]): EventsRes!
  getEvents(page: Int, take: Int, skip: Int, templeId: Int): EventsRes!
  getBookingEvents(page: Int, take: Int, skip: Int, name: String, address: String, orderBy: [OrderBy!], bookingStatus: EBookingStatus): BookingEventsRes!
  getEventById(id: Int!): EventRes!
  getEventParticipants(page: Int, take: Int, skip: Int, eventId: Int!, name: String, email: String, address: String, familyName: String, bookingStatus: EBookingStatus!, isFollowing: Boolean, orderBy: [OrderBy!]): EventParticipantsRes!
  templeGetFollowers(page: Int, take: Int, skip: Int, name: String, email: String, phone: String, address: String, familyName: String, orderBy: [OrderBy!], isInFamily: Boolean): FollowerTemplesRes!
  getOfferings(page: Int, take: Int, skip: Int): OfferingsRes!
}

input OrderBy {
  column: String!
  sortOrder: ESortOrder!
}

enum ESortOrder {
  ASC
  DESC
}

type Mutation {
  verifyRegister(token: String!): UpdateRes!
  removeFamilyMember(removeFamilyMemberInput: RemoveFamilyMemberInput!): UpdateRes!
  forgotPassword(forgotPasswordInput: VForgotPasswordInput!): CreateRes!
  resetPassword(resetPasswordInput: VResetPasswordInput!): UpdateRes!
  updateStatusTemple(updateStatusTempleInput: VUpdateStatusTempleInput!): UpdateRes!
  addTempleMember(addTempleMemberInput: VAddTempleMemberInput!): UpdateRes!
  removeTempleMember(removeTempleMemberInput: VRemoveTempleMemberInput!): UpdateRes!
  updateDeceased(updateDeceasedInput: VUpdateDeceasedInput!): UpdateRes!
  addDeceasedImage(addDeceasedImageInput: VAddDeceasedImageInput!): UpdateRes!
  deleteDeceased(id: Int!): UpdateRes!
  restoreDeceased(id: Int!): UpdateRes!
  updateDeceasedStatus(updateDeceasedStatusInput: VUpdateDeceasedStatusInput!): UpdateRes!
  createDeathAnniversary(createDeathAnniversaryInput: CreateDeathAnniversaryInput!): DeathAnniversaryRes!
  templeUpdateDeathAnniversary(templeUpdateDeathAnniversaryInput: TempleUpdateDeathAnniversaryInput!): GQLResponse!
  familyUpdateDeathAnniversary(updateDeathAnniversaryInput: UpdateDeathAnniversaryInput!): GQLResponse!
  cancelDeathAnniversary(cancelDeathAnniversaryInput: CancelDeathAnniversaryInput!): GQLResponse!
  createTest(createTestInput: CreateTestInput!): Test!
  updateTest(updateTestInput: UpdateTestInput!): Test!
  removeTest(id: Int!): Test!
  createEvent(createEventInput: VCreateEventInput!): EventRes!
  updateEvent(updateEventInput: VUpdateEventInput!): UpdateRes!
  bookingEvent(bookingEventInput: VBookingEventInput!): CreateRes!
  updateEventParticipant(bookingEventInput: UpdateEventParticipantInput!): UpdateRes!
  eventParticipantCheckIn(eventParticipantCheckInInput: VEventParticipantCheckInInput!): UpdateRes!
  cancelBookingEvent(eventId: Int!): UpdateRes!
  updateNotification(updateNotificationInput: UpdateNotificationInput!): UpdateRes!
  responseFamilyInvitation(responseInviteFamilyInput: ResponseInviteFamilyInput!): UpdateRes!
  inviteToFamily(inviteFamilyInput: InviteFamilyInput!): CreateRes!
  followTemple(followTempleInput: VFollowTempleInput!): CreateRes!
  unfollowTemple(templeId: Int!): DeleteRes!
}

input RemoveFamilyMemberInput {
  id: Int!
}

input VForgotPasswordInput {
  email: String!
}

input VResetPasswordInput {
  token: String!
  password: String!
}

input VUpdateStatusTempleInput {
  id: Int!
  status: EStatus!
  rejectReason: String
  blockReason: String
}

input VAddTempleMemberInput {
  email: String!
}

input VRemoveTempleMemberInput {
  userId: Int!
}

input VUpdateDeceasedInput {
  id: Int!
  dateOfDeath: String
  description: String
  avatar: String
  images: [String!]
  name: String
  birthday: String
  address: String
  gender: EGender
  citizenNumber: String
  templeId: Int
}

input VAddDeceasedImageInput {
  id: Int!
  images: [String!]!
}

input VUpdateDeceasedStatusInput {
  id: Int!
  status: EStatus!
  rejectReason: String
}

input CreateDeathAnniversaryInput {
  deceasedId: Int!
  desiredStartTime: DateTime!
  desiredEndTime: DateTime!
  note: String
  isLiveStream: Boolean!
  deathAnniversaryType: EDeathAnniversaryType!
  offeringIds: [Int!]!
}

input TempleUpdateDeathAnniversaryInput {
  id: Int!
  status: EDeathAnniversaryStatus!
  enableUpdate: Boolean
  desiredStartTime: DateTime
  desiredEndTime: DateTime
  note: String
  actualStartTime: DateTime
  actualEndTime: DateTime
  linkLiveStream: String
  rejectReason: String
  readyImage: String
  finishedImage: String
}

input UpdateDeathAnniversaryInput {
  id: Int!
  desiredStartTime: DateTime
  desiredEndTime: DateTime
  note: String
  offeringIds: [Int!]
  deathAnniversaryType: EDeathAnniversaryType
  isLiveStream: Boolean
}

input CancelDeathAnniversaryInput {
  id: Int!
}

input CreateTestInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateTestInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input VCreateEventInput {
  name: String!
  isFreeOpen: Boolean!
  avatar: String
  images: [String!]
  description: String
  startDateEvent: DateTime!
  endDateEvent: DateTime!
  startDateBooking: DateTime
  endDateBooking: DateTime
  address: String!
  phone: String!
  email: String
  maxParticipant: Float
  roles: [ERole!]
}

input VUpdateEventInput {
  name: String
  isFreeOpen: Boolean
  avatar: String
  images: [String!]
  description: String
  startDateEvent: DateTime
  endDateEvent: DateTime
  startDateBooking: DateTime
  endDateBooking: DateTime
  address: String
  phone: String
  email: String
  maxParticipant: Float
  roles: [ERole!]
  id: Int!
  isDeleted: Boolean
}

input VBookingEventInput {
  eventId: Int!
}

input UpdateEventParticipantInput {
  eventParticipantId: Int!
  bookingStatus: EBookingStatus!
  rejectReason: String
}

input VEventParticipantCheckInInput {
  eventId: Int!
  code: String!
}

input UpdateNotificationInput {
  id: Int!
  isRead: Boolean!
  isDeleted: Boolean
  createdAt: DateTime
}

input ResponseInviteFamilyInput {
  id: Int!
  notificationId: Int!
  status: EStatus!
}

input InviteFamilyInput {
  email: String!
}

input VFollowTempleInput {
  templeId: Int!
}

type Subscription {
  getNotifications(page: Int, take: Int, skip: Int): NotificationsRes!
}