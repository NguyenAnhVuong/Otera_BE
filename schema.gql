# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Family {
  id: Int!
  familyCode: String!
  adminId: Int!
  name: String!
  description: String!
  address: String!
  phone: String!
  avatar: String!
  status: EStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  users: [User!]!
  deceaseds: [Deceased!]!
  familyTemples: [FamilyTemple!]!
  deathAnniversaries: [DeathAnniversary!]!
}

enum EStatus {
  REJECTED
  PENDING
  APPROVED
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type FamilyTemple {
  id: Int!
  familyId: Int
  templeId: Int
  isDeleted: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  family: Family!
  temple: Temple!
}

type Review {
  id: Int!
  userId: Int!
  templeId: Int
  eventId: Int
  content: String!
  rating: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  temple: Temple!
  user: User!
}

type TempleMember {
  id: Int!
  templeId: Int!
  userId: Int!
  user: User!
  temple: Temple!
}

type Temple {
  id: Int!
  name: String!
  avatar: String!
  address: String!
  phone: String
  email: String
  website: String
  priority: EPriority!
  priorityExpired: DateTime
  plan: EPlan!
  planExpired: DateTime
  status: EStatus!
  adminId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  admin: User!
  deceaseds: [Deceased!]!
  familyTemples: [FamilyTemple!]!
  images: [Image!]!
  reviews: [Review!]!
  deathAnniversaries: [DeathAnniversary!]!
  templeMembers: [TempleMember!]!
}

enum EPriority {
  LOW
  MEDIUM
  HIGH
}

enum EPlan {
  FREE
  PREMIUM
}

type EventParticipant {
  id: Int!
  eventId: Int!
  userId: Int!
  bookingStatus: EBookingStatus!
  code: String
  rejectReason: String
  isDeleted: Boolean!
  approverId: Int
  checkInAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  event: Event!
  user: User!
  approver: User
}

enum EBookingStatus {
  BOOKING
  REJECTED
  APPROVED
  CANCEL
}

type EventParticipantType {
  id: Int!
  eventId: Int!
  role: ERole!
  isDeleted: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  event: Event!
}

enum ERole {
  SYSTEM
  FAMILY_ADMIN
  FAMILY_MEMBER
  TEMPLE_ADMIN
  TEMPLE_MEMBER
  PUBLIC_USER
}

type Event {
  id: Int!
  templeId: Int
  creatorId: Int!
  name: String!
  avatar: String!
  description: String
  startDateEvent: DateTime!
  endDateEvent: DateTime!
  startDateBooking: DateTime!
  endDateBooking: DateTime!
  address: String!
  phone: String
  email: String
  priority: EPriority!
  priorityExpired: DateTime
  isDeleted: Boolean!
  maxParticipant: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  eventParticipants: [EventParticipant!]!
  images: [Image!]!
  eventParticipantTypes: [EventParticipantType!]!
  user: User!
}

type Image {
  id: Int!
  deceasedId: Int
  templeId: Int
  eventId: Int
  image: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deceased: Deceased!
  temple: Temple!
  event: Event!
}

type UserDetail {
  id: Int!
  avatar: String!
  name: String!
  phone: String
  birthday: String!
  address: String
  gender: EGender!
  citizenNumber: String
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  deceased: Deceased!
}

enum EGender {
  MALE
  FEMALE
  OTHER
}

type Deceased {
  id: Int!
  dateOfDeath: String!
  description: String
  userDetailId: Int
  templeId: Int!
  familyId: Int!
  creatorId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  temple: Temple!
  family: Family!
  images: [Image!]!
  userDetail: UserDetail!
  deathAnniversaries: [DeathAnniversary!]!
}

type DeathAnniversary {
  id: Int!
  deceasedId: Int!
  familyId: Int!
  templeId: Int!
  desiredStartTime: DateTime!
  desiredEndTime: DateTime!
  actualStartTime: DateTime
  actualEndTime: DateTime
  status: EStatus!
  enableUpdate: Boolean!
  creatorId: Int!
  note: String
  rejectReason: String
  isDeleted: Boolean!
  isLiveStream: Boolean!
  linkLiveStream: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deceased: Deceased!
  temple: Temple!
  user: User!
  family: Family!
}

type User {
  id: Int!
  email: String!
  role: ERole!
  familyId: Int
  userDetailId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  temple: Temple!
  userDetail: UserDetail!
}

type GQLResponse {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
}

type DeathAnniversariesRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: [DeathAnniversary!]!
}

type DeathAnniversaryRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: DeathAnniversary!
}

type ListDeceasedRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: [Deceased!]!
}

type DeceasedRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: Deceased!
}

type UserRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: User!
}

type TemplesPagingData {
  totalItems: Int!
  page: Int!
  totalPages: Int!
  take: Int!
  data: [Temple!]
}

type TemplesRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: TemplesPagingData!
}

type CreateRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: Boolean!
}

type AffectedResult {
  affected: Int!
}

type UpdateRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: AffectedResult
}

type EventParticipantRes {
  id: Int!
  eventId: Int!
  userId: Int!
  bookingStatus: EBookingStatus!
  code: String
  rejectReason: String
  isDeleted: Boolean!
  approverId: Int
  checkInAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  event: Event!
  user: User!
  approver: User
  isBelongToTemple: Boolean!
  familyName: String
}

type ListEventParticipant {
  totalItems: Int!
  page: Int!
  totalPages: Int!
  take: Int!
  data: [EventParticipantRes!]
}

type EventParticipantsRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: ListEventParticipant
}

type EventDetail {
  id: Int!
  templeId: Int
  creatorId: Int!
  name: String!
  avatar: String!
  description: String
  startDateEvent: DateTime!
  endDateEvent: DateTime!
  startDateBooking: DateTime!
  endDateBooking: DateTime!
  address: String!
  phone: String
  email: String
  priority: EPriority!
  priorityExpired: DateTime
  isDeleted: Boolean!
  maxParticipant: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  eventParticipants: [EventParticipant!]!
  images: [Image!]!
  eventParticipantTypes: [EventParticipantType!]!
  user: User!
  currentParticipant: Float!
  isBooked: Boolean!
}

type EventRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: EventDetail
}

type EventManagementInfo {
  id: Int!
  templeId: Int
  creatorId: Int!
  name: String!
  avatar: String!
  description: String
  startDateEvent: DateTime!
  endDateEvent: DateTime!
  startDateBooking: DateTime!
  endDateBooking: DateTime!
  address: String!
  phone: String
  email: String
  priority: EPriority!
  priorityExpired: DateTime
  isDeleted: Boolean!
  maxParticipant: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  eventParticipants: [EventParticipant!]!
  images: [Image!]!
  eventParticipantTypes: [EventParticipantType!]!
  user: User!
  currentParticipant: Float!
  bookingParticipant: Float!
  checkInParticipant: Float!
}

type EventsPagingData {
  totalItems: Int!
  page: Int!
  totalPages: Int!
  take: Int!
  data: [EventManagementInfo!]!
}

type EventsRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: EventsPagingData!
}

type BookingEventsPagingData {
  totalItems: Int!
  page: Int!
  totalPages: Int!
  take: Int!
  data: [Event!]!
}

type BookingEventsRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: BookingEventsPagingData!
}

type Test {
  """Example field (placeholder)"""
  exampleField: Int!
}

type Test2 {
  """Example field (placeholder)"""
  statusCode: Int!

  """Example field (placeholder)"""
  errorMessage: String

  """Example field (placeholder)"""
  errorCode: String

  """Example field (placeholder)"""
  timestamp: String!

  """Example field (placeholder)"""
  data: Test!
}

type FamilyRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: Family!
}

type FamilyMembers {
  totalItems: Int!
  page: Int!
  totalPages: Int!
  take: Int!
  data: [User!]!
}

type FamilyMembersRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: FamilyMembers!
}

type Notification {
  id: Int!
  userId: Int
  title: String!
  description: String
  type: ENotificationType!
  inviteFamilyId: Int
  redirectTo: String
  isRead: Boolean!
  isDeleted: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum ENotificationType {
  INVITE_FAMILY
}

type NotificationsPagingData {
  totalItems: Int!
  page: Int!
  totalPages: Int!
  take: Int!
  data: [Notification!]!
}

type NotificationsRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: NotificationsPagingData!
}

type IsBookedEvent {
  isBooked: Boolean!
}

type Query {
  getUser: UserRes!
  systemGetTemples(page: Int, take: Int, skip: Int, keyword: String, familyId: Float, priority: EPriority, status: EStatus): TemplesRes!
  getFamily(page: Int, take: Int, skip: Int, id: Int!): FamilyRes!
  getFamilyMembers(page: Int, take: Int, skip: Int, orderBy: [OrderBy!], id: Int!, name: String, address: String, email: String, phone: String, roleFilter: [ERole!]): FamilyMembersRes!
  getListDeceased(familyId: Int!): ListDeceasedRes!
  getDeceased(id: Int!): DeceasedRes!
  test123(id: Int!): Test2!
  getDeathAnniversaries(getDeathAnniversariesInput: GetDeathAnniversariesInput!): DeathAnniversariesRes!
  templeGetEvents(page: Int, take: Int, skip: Int, name: String, upcoming: Boolean, onGoing: Boolean, ended: Boolean, orderBy: [OrderBy!]): EventsRes!
  getEvents(page: Int, take: Int, skip: Int, templeId: Int): EventsRes!
  getBookingEvents(page: Int, take: Int, skip: Int, name: String, address: String, orderBy: [OrderBy!], bookingStatus: EBookingStatus): BookingEventsRes!
  getEventById(id: Int!): EventRes!
  getEventParticipants(page: Int, take: Int, skip: Int, eventId: Int!, name: String, email: String, address: String, familyName: String, bookingStatus: EBookingStatus!, isBelongToTemple: Boolean, orderBy: [OrderBy!]): EventParticipantsRes!
}

input OrderBy {
  column: String!
  sortOrder: ESortOrder!
}

enum ESortOrder {
  ASC
  DESC
}

input GetDeathAnniversariesInput {
  isEnd: Boolean
  isStart: Boolean
  isPending: Boolean
}

type Mutation {
  createTest(createTestInput: CreateTestInput!): Test!
  updateTest(updateTestInput: UpdateTestInput!): Test!
  removeTest(id: Int!): Test!
  createDeathAnniversary(createDeathAnniversaryInput: CreateDeathAnniversaryInput!): DeathAnniversaryRes!
  templeUpdateDeathAnniversary(templeUpdateDeathAnniversaryInput: TempleUpdateDeathAnniversaryInput!): GQLResponse!
  familyUpdateDeathAnniversary(updateDeathAnniversaryInput: UpdateDeathAnniversaryInput!): GQLResponse!
  cancelDeathAnniversary(cancelDeathAnniversaryInput: CancelDeathAnniversaryInput!): GQLResponse!
  createEvent(createEventInput: VCreateEventInput!): EventRes!
  updateEvent(updateEventInput: VUpdateEventInput!): UpdateRes!
  bookingEvent(bookingEventInput: VBookingEventInput!): CreateRes!
  updateEventParticipant(bookingEventInput: UpdateEventParticipantInput!): UpdateRes!
  eventParticipantCheckIn(eventParticipantCheckInInput: VEventParticipantCheckInInput!): UpdateRes!
  cancelBookingEvent(eventId: Int!): UpdateRes!
  updateNotification(updateNotificationInput: UpdateNotificationInput!): UpdateRes!
  responseFamilyInvitation(responseInviteFamilyInput: ResponseInviteFamilyInput!): UpdateRes!
  inviteToFamily(inviteFamilyInput: InviteFamilyInput!): CreateRes!
}

input CreateTestInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateTestInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateDeathAnniversaryInput {
  deceasedId: Int!
  desiredStartTime: DateTime!
  desiredEndTime: DateTime!
  note: String
  isLiveStream: Boolean!
}

input TempleUpdateDeathAnniversaryInput {
  id: Int!
  status: EStatus!
  enableUpdate: Boolean
  desiredStartTime: DateTime
  desiredEndTime: DateTime
  note: String
  actualStartTime: DateTime
  actualEndTime: DateTime
  linkLiveStream: String
  rejectReason: String
}

input UpdateDeathAnniversaryInput {
  id: Int!
  desiredStartTime: DateTime
  desiredEndTime: DateTime
  note: String
}

input CancelDeathAnniversaryInput {
  id: Int!
}

input VCreateEventInput {
  name: String!
  avatar: String
  images: [String!]
  description: String
  startDateEvent: DateTime!
  endDateEvent: DateTime!
  startDateBooking: DateTime!
  endDateBooking: DateTime!
  address: String!
  phone: String
  email: String
  maxParticipant: Float
  roles: [ERole!]!
}

input VUpdateEventInput {
  name: String
  avatar: String
  images: [String!]
  description: String
  startDateEvent: DateTime
  endDateEvent: DateTime
  startDateBooking: DateTime
  endDateBooking: DateTime
  address: String
  phone: String
  email: String
  maxParticipant: Float
  roles: [ERole!]
  id: Int!
  isDeleted: Boolean
}

input VBookingEventInput {
  eventId: Int!
}

input UpdateEventParticipantInput {
  eventParticipantId: Int!
  bookingStatus: EBookingStatus!
  rejectReason: String
}

input VEventParticipantCheckInInput {
  eventId: Int!
  code: String!
}

input UpdateNotificationInput {
  id: Int!
  isRead: Boolean!
  isDeleted: Boolean!
  createdAt: DateTime!
}

input ResponseInviteFamilyInput {
  id: Int!
  notificationId: Int!
  status: EStatus!
}

input InviteFamilyInput {
  email: String!
}

type Subscription {
  getNotifications(page: Int, take: Int, skip: Int): NotificationsRes!
}