# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Family {
  id: Int!
  adminId: Int!
  name: String!
  description: String!
  address: String!
  phone: String!
  avatar: String!
  status: EStatus!
  createdAt: String!
  updatedAt: String!
  users: [User!]!
  deceaseds: [Deceased!]!
  familyTemples: [FamilyTemple!]!
}

enum EStatus {
  REJECTED
  PENDING
  APPROVED
}

type FamilyTemple {
  id: Int!
  familyId: Int
  templeId: Int
  createdAt: String!
  updatedAt: String!
  family: Family!
  temple: Temple!
}

type Review {
  id: Int!
  userId: Int!
  templeId: Int
  eventId: Int
  content: String!
  rating: Int!
  createdAt: String!
  updatedAt: String!
  temple: Temple!
  user: User!
}

type DeathAnniversary {
  id: Int!
  deceasedId: Int!
  templeId: Int!
  desiredStartTime: String!
  desiredEndTime: String!
  actualStartTime: String
  actualEndTime: String
  status: EStatus!
  creatorId: Int!
  note: String
  isDeleted: Boolean!
  isLiveStream: Boolean!
  createdAt: String!
  updatedAt: String!
  deceased: Deceased!
  temple: Temple!
  user: User!
}

type Temple {
  id: Int!
  name: String!
  avatar: String!
  address: String!
  phone: String
  email: String
  website: String
  priority: EPriority!
  priorityExpired: DateTime
  plan: EPlan!
  planExpired: DateTime
  status: EStatus!
  adminId: Int!
  createdAt: String!
  updatedAt: String!
  deceaseds: [Deceased!]!
  familyTemples: [FamilyTemple!]!
  images: [Image!]!
  reviews: [Review!]!
  deathAnniversaries: [DeathAnniversary!]!
}

enum EPriority {
  LOW
  MEDIUM
  HIGH
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum EPlan {
  FREE
  PREMIUM
}

type EventParticipant {
  id: Int!
  eventId: Int!
  userId: Int!
  bookingStatus: EBookingStatus!
  createdAt: String!
  updatedAt: String!
  event: Event!
}

enum EBookingStatus {
  BOOKING
  APPROVED
  CANCEL
}

type EventParticipantType {
  id: Int!
  eventId: Int!
  role: ERole!
  createdAt: String!
  updatedAt: String!
  event: Event!
}

enum ERole {
  SYSTEM
  FAMILY_ADMIN
  FAMILY_MEMBER
  TEMPLE_ADMIN
  PUBLIC_USER
}

type Event {
  id: Int!
  templeId: Int
  name: String!
  avatar: String!
  description: String!
  startDateEvent: String!
  endDateEvent: String!
  startDateBooking: String!
  endDateBooking: String!
  address: String!
  phone: String!
  email: String!
  priority: EPriority!
  priorityExpired: DateTime
  createdAt: String!
  updatedAt: String!
  eventParticipants: [EventParticipant!]!
  images: [Image!]!
  eventParticipantTypes: [EventParticipantType!]!
}

type Image {
  id: Int!
  deceasedId: Int
  templeId: Int
  eventId: Int
  image: String!
  createdAt: String!
  updatedAt: String!
  deceased: Deceased!
  temple: Temple!
  event: Event!
}

type Deceased {
  id: Int!
  dateOfDeath: String!
  description: String
  userDetailId: Int
  templeId: Int!
  familyId: Int!
  creatorId: Int!
  createdAt: String!
  updatedAt: String!
  temple: Temple!
  family: Family!
  images: [Image!]!
  userDetail: UserDetail!
  deathAnniversaries: [DeathAnniversary!]!
}

type UserDetail {
  id: Int!
  avatar: String!
  name: String!
  phone: String
  birthday: String!
  address: String
  gender: EGender!
  citizenNumber: String
  createdAt: String!
  updatedAt: String!
  user: User!
  deceased: Deceased!
}

enum EGender {
  MALE
  FEMALE
  OTHER
}

type User {
  id: Int!
  email: String!
  password: String!
  role: ERole!
  refreshToken: String
  familyId: Int
  userDetailId: Int
  createdAt: String!
  updatedAt: String!
  userDetail: UserDetail!
}

type ListDeceasedRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: [Deceased!]!
}

type DeceasedRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: Deceased!
}

type UserRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: User!
}

type Test {
  """Example field (placeholder)"""
  exampleField: Int!
}

type Test2 {
  """Example field (placeholder)"""
  statusCode: Int!

  """Example field (placeholder)"""
  errorMessage: String

  """Example field (placeholder)"""
  errorCode: String

  """Example field (placeholder)"""
  timestamp: String!

  """Example field (placeholder)"""
  data: Test!
}

type DeathAnniversaryRes {
  statusCode: Int!
  errorMessage: String
  errorCode: String
  timestamp: String!
  data: DeathAnniversary!
}

type Query {
  getUser: UserRes!
  getListDeceased(familyId: Int!): ListDeceasedRes!
  getDeceased(id: Int!): DeceasedRes!
  test123(id: Int!): Test2!
}

type Mutation {
  createTest(createTestInput: CreateTestInput!): Test!
  updateTest(updateTestInput: UpdateTestInput!): Test!
  removeTest(id: Int!): Test!
  createDeathAnniversary(createDeathAnniversaryInput: CreateDeathAnniversaryInput!): DeathAnniversaryRes!
}

input CreateTestInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateTestInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateDeathAnniversaryInput {
  deceasedId: Int!
  desiredStartTime: String!
  desiredEndTime: String!
  note: String!
  isLiveStream: Boolean!
}